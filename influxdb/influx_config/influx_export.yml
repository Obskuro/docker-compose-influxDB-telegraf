apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: funny-booth-2de001
spec:
    name: bucket
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: priceless-margulis-6de001
spec:
    every: 1m0s
    name: Name this Check
    query: |-
        from(bucket: "bucket")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "disk")
          |> filter(fn: (r) => r["_field"] == "used_percent")
          |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
          |> yield(name: "mean")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level }'
    thresholds:
      - level: CRIT
        type: greater
        value: 54
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: confident-mestorf-6de003
spec:
    language: flux
    name: bucket
    query: |-
        buckets()
          |> filter(fn: (r) => r.name !~ /^_/)
          |> rename(columns: {name: "_value"})
          |> keep(columns: ["_value"])
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: vibrant-kowalevski-2de001
spec:
    charts:
      - height: 1
        kind: Markdown
        name: Name this Cell
        note: This dashboard gives you an overview of [Docker](https://docker.com)
            metrics. See the [Telegraf Documentation](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/docker)
            for help configuring these plugins.
        width: 12
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        height: 1
        kind: Single_Stat
        name: System Uptime
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "system")
                  |> filter(fn: (r) => r._field == "uptime")
                  |> window(period: 1h)
                  |> last()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> map(fn: (r) => ({r with _value: float(v: r._value) / 86400.0}))
                  |> yield(name: "last")
        suffix: ' days'
        width: 3
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
            suffix: '%'
          - base: "10"
            name: y2
            scale: linear
        geom: line
        height: 3
        kind: Xy
        name: Disk Usage
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "disk")
                  |> filter(fn: (r) => r._field == "used_percent")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "mean")
        width: 3
        yPos: 2
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        geom: line
        height: 3
        kind: Xy
        name: 'Number of Docker containers '
        queries:
          - query: |-
                from(bucket:v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "docker")
                  |> filter(fn: (r) => r._field == "n_containers" or r._field == "n_containers_paused" or r._field == "n_containers_running" or r._field == "n_containers_stopped")
                 |> window(period: v.windowPeriod)
                 |> mean()
                 |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "mean")
        width: 3
        yPos: 5
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "2"
            label: Bytes
            name: y
            scale: linear
          - base: "10"
            name: y2
            scale: linear
        geom: line
        height: 3
        kind: Xy
        name: Network TX trafic per container / sec
        queries:
          - query: "from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:
                v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"docker_container_net\")\n
                \ |> filter(fn: (r) => r._field == \"tx_bytes\")  \n  |> derivative(unit:
                1s, nonNegative: false)\n  |> window(period: v.windowPeriod)\n  |>
                mean()\n  |> group(columns: [\"_value\", \"_time\", \"_start\", \"_stop\"],
                mode: \"except\")\n  |> keep(columns: [\"_measurement\",\"container_name\",
                \"host\",\"_value\",\"_field\",\"_stop\"])\n  |> yield(name: \"mean\")"
        width: 3
        yPos: 8
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: nCPUs
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "system")
                  |> filter(fn: (r) => r._field == "n_cpus")
                  |> window(period: v.windowPeriod)
                  |> last()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "last")
        suffix: ' cpus'
        width: 2
        xPos: 3
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
            suffix: '%'
          - base: "10"
            name: y2
            scale: linear
        geom: line
        height: 3
        kind: Xy
        name: CPU Usage
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "cpu")
                  |> filter(fn: (r) => r._field == "usage_user" or r._field == "usage_system" or r._field == "usage_idle")
                  |> filter(fn: (r) => r.cpu == "cpu-total")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "mean")
        width: 3
        xPos: 3
        yPos: 2
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        geom: line
        height: 3
        kind: Xy
        name: CPU usage per container
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "cpu" or r._measurement == "docker_container_cpu")
                  |> filter(fn: (r) => r._field == "usage_percent")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])
                  |> yield(name: "mean")
        width: 3
        xPos: 3
        yPos: 5
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "2"
            label: Bytes
            name: y
            scale: linear
          - base: "10"
            name: y2
            scale: linear
        colors:
          - hex: '#FDC44F'
            id: 36fb2e03-6f87-4e03-ad73-3c702f0b32a3
            name: Cthulhu
            type: scale
          - hex: '#007C76'
            id: d80fbd9e-25a1-47b9-8b8e-cfac3cbbe7ac
            name: Cthulhu
            type: scale
          - hex: '#8983FF'
            id: 9a17e08d-e044-4d2b-a535-16f90c933a29
            name: Cthulhu
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Network RX trafic per container / sec
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "docker_container_net")
                  |> filter(fn: (r) => r._field == "rx_bytes" )
                  |> derivative(unit: 1s, nonNegative: false)
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])
                  |> yield(name: "mean")
        width: 3
        xPos: 3
        yPos: 8
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: System Load
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "system")
                  |> filter(fn: (r) => r._field == "load1")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "mean")
        width: 2
        xPos: 5
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: Load
            name: y
            scale: linear
          - base: "10"
            name: y2
            scale: linear
        geom: line
        height: 3
        kind: Xy
        name: System Load
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "system")
                  |> filter(fn: (r) => r._field == "load1" or r._field == "load5" or r._field == "load15")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "mean")
        width: 3
        xPos: 6
        yPos: 2
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        geom: line
        height: 3
        kind: Xy
        name: Memory usage % per container
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "docker_container_mem")
                  |> filter(fn: (r) => r._field == "usage_percent")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])
                  |> yield(name: "mean")
        width: 3
        xPos: 6
        yPos: 5
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "2"
            label: Bytes
            name: y
            scale: linear
          - base: "10"
            name: y2
            scale: linear
        colors:
          - hex: '#74D495'
            id: 6d613468-d49b-4cac-b46e-dd21c0dfa187
            name: Atlantis
            type: scale
          - hex: '#3F3FBA'
            id: 9b58cbce-b5ae-420a-8da1-83a883ae0c36
            name: Atlantis
            type: scale
          - hex: '#FF4D9E'
            id: 8cffc601-ed7c-4a0c-8bca-f5f50036f5ec
            name: Atlantis
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Disk I/O read per container / sec
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "docker_container_blkio")
                  |> filter(fn: (r) => r._field == "io_service_bytes_recursive_read")
                  |> derivative(unit: 1s, nonNegative: false)
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])
                  |> yield(name: "mean")
        width: 3
        xPos: 6
        yPos: 8
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Total Memory
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "mem")
                  |> filter(fn: (r) => r._field == "total")
                  |> window(period: v.windowPeriod)
                  |> last()
                  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1024.0 / 1024.0 / 1024.0}))
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "last")
        suffix: ' GB'
        width: 2
        xPos: 7
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
            suffix: '%'
          - base: "10"
            name: y2
            scale: linear
        colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
          - hex: '#8F8AF4'
            id: c2f922df-60a1-4471-91fc-c16427e7fcfb
            name: Do Androids Dream of Electric Sheep?
            type: scale
          - hex: '#A51414'
            id: 330f7fee-d44e-4a15-b2d6-2330178ec203
            name: Do Androids Dream of Electric Sheep?
            type: scale
          - hex: '#F4CF31'
            id: e3c73eb3-665a-414b-afdd-1686c9b962d9
            name: Do Androids Dream of Electric Sheep?
            type: scale
        decimalPlaces: 1
        height: 2
        kind: Single_Stat_Plus_Line
        name: Memory Usage
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "mem")
                  |> filter(fn: (r) => r._field == "used_percent")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "mean")
        suffix: '%'
        width: 3
        xPos: 9
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "2"
            name: y
            scale: linear
          - base: "10"
            name: y2
            scale: linear
        geom: line
        height: 2
        kind: Xy
        name: Swap
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "swap")
                  |> filter(fn: (r) => r._field == "total" or r._field == "used")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> yield(name: "mean")
        width: 3
        xPos: 9
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        geom: line
        height: 3
        kind: Xy
        name: Memory usage per container
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "docker_container_mem")
                  |> filter(fn: (r) => r._field == "usage")
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])
                  |> yield(name: "mean")
        width: 3
        xPos: 9
        yPos: 5
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "2"
            label: Bytes
            name: y
            scale: linear
          - base: "10"
            name: y2
            scale: linear
        colors:
          - hex: '#FDC44F'
            id: 36fb2e03-6f87-4e03-ad73-3c702f0b32a3
            name: Cthulhu
            type: scale
          - hex: '#007C76'
            id: d80fbd9e-25a1-47b9-8b8e-cfac3cbbe7ac
            name: Cthulhu
            type: scale
          - hex: '#8983FF'
            id: 9a17e08d-e044-4d2b-a535-16f90c933a29
            name: Cthulhu
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Disk I/O write per container / sec
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "docker_container_blkio")
                  |> filter(fn: (r) =>  r._field == "io_service_bytes_recursive_write")
                  |> derivative(unit: 1s, nonNegative: false)
                  |> window(period: v.windowPeriod)
                  |> mean()
                  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")
                  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])
                  |> yield(name: "mean")
        width: 3
        xPos: 9
        yPos: 8
    description: A collection of useful visualizations for monitoring your system
        stats
    name: Docker
